// Generated by CoffeeScript 1.3.3
(function() {
  var PageEditor, PersistentGrass, Ruler, SimpleHtml5Editor, Sortable, assign_toolbar_events, changed_input, contextual_menu, delete_, drop, getCurrentElement, getFromMenu, recover_mobility, setCss, setup_menu, setup_toolbar, stoppropagation, update_toolbar;

  contextual_menu = function(target, menu_position) {
    ($('#menu'))[0].dataset['currentTarget'] = $(target).attr('id');
    ($('#menu')).css('top', menu_position[1] - 35);
    ($('#menu')).css('left', menu_position[0] - 30);
    ($('#menu')).show();
    return false;
  };

  setup_menu = function(target) {
    return ($(target)).on('click', function(ev) {
      if (ev.button === 0 && ev.target.parentNode.id !== "#menu") {
        return $('#menu').css("display", "none");
      }
    });
  };

  drop = function(ev) {
    var files, reader;
    files = ev.dataTransfer.files;
    reader = new FileReader();
    console.log(files[0]);
    console.log(reader);
    reader.onload = function(evt) {
      var img;
      img = $('<img>');
      img.attr('src', evt.target.result);
      img.addClass('persistentGrassy');
      ($('body')).append(img);
      return ($(img)).PersistentGrass();
    };
    reader.readAsDataURL(files[0]);
    return stoppropagation(ev);
  };

  stoppropagation = function(ev) {
    ev.preventDefault();
    return ev.stopPropagation();
  };

  ($('#filediv')).on('drop', drop);

  ($('#filediv')).on('dragenter', stoppropagation);

  ($('#filediv')).on('dragover', stoppropagation);

  ($('#filediv')).on('dragexit', stoppropagation);

  window.dragSrc = null;

  PageEditor = (function() {

    function PageEditor(element_, options) {
      this.element_ = element_;
      this.options = $.extend({}, options);
      this.element = $(this.element_);
      this.init();
    }

    PageEditor.prototype.init = function() {
      var data, ul;
      ul = $("<ul></ul>");
      ul.html((function() {
        var _i, _len, _ref, _results;
        _ref = this.options.structure;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          data = _ref[_i];
          _results.push(create_li(data));
        }
        return _results;
      }).call(this));
      return ul;
    };

    PageEditor.prototype.create_li = function(data) {
      var li;
      li = $('<li></li>');
      return li.html('<a href=#><span onclick="this.location.href=\"/page/by_id/' + data['id'] + '\""> ' + data['name'] + ' <i class=icon-remove onclick="delete_page(' + data['id'] + ');> </i>"</a>');
    };

    PageEditor.prototype.create_structure = function(struct) {
      return "foo";
    };

    return PageEditor;

  })();

  (function($) {
    return $.fn.PageEditor = function(options) {
      var elem, page_editor;
      if (options == null) {
        options = "";
      }
      return page_editor = (function() {
        var _i, _len, _ref, _results;
        _ref = this.children();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          _results.push(new PageEditor(elem, options));
        }
        return _results;
      }).call(this);
    };
  })($);

  assign_toolbar_events = function() {
    ($('#y')).on('input', changed_input);
    ($('#y')).on('change', changed_input);
    return ($('#y')).on('blur', changed_input);
  };

  changed_input = function(ev) {
    console.log(this);
    return console.log("foo");
  };

  update_toolbar = function(target) {
    ($('#width')).val(((target.css('width')).split('px'))[0]);
    ($('#height')).val(((target.css('height')).split('px'))[0]);
    ($('#y')).val(((target.css('top')).split('px'))[0]);
    return ($('#x')).val(((target.css('left')).split('px'))[0]);
  };

  setup_toolbar = function(toolbar) {
    ($('#opacitypicker')).on('change', function() {
      if (getCurrentElement()) {
        return getCurrentElement().css('opacity', $('#opacitypicker').val());
      }
    });
    return ($('#colorpicker')).on('change', function() {
      if ($('#panel_left').data('current_element')) {
        return getCurrentElement().css('background', $('#colorpicker').val());
      } else {
        return $('body').css('background', $('#colorpicker').val());
      }
    });
  };

  window.changed = changed_input;

  stoppropagation = function(evt) {
    evt.stopPropagation();
    return evt.preventDefault();
  };

  recover_mobility = function() {
    var element;
    element = getCurrentElement();
    ($(element)).attr('draggable', true);
    return ($(element)).removeClass('editor_active');
  };

  setCss = function(param, value, element, parent) {
    var curr_value;
    element = $('#' + element);
    curr_value = Number(($(element)).css(param));
    if (curr_value === "auto" || !curr_value) {
      curr_value = 0;
    }
    if (value === "-1") {
      value = curr_value + 1;
    }
    if (value === "+1") {
      value = curr_value + 1;
    }
    ($(element)).css(param, value);
    if (parent) {
      $(element).parent().css(param, value);
    }
    return $(element).trigger('changed', param, value);
  };

  getFromMenu = function(element) {
    return $(element).parent().parent()[0].dataset['currentTarget'];
  };

  delete_ = function(element, parent) {
    if (parent == null) {
      parent = False;
    }
    $(element).trigger('changed', 'delete');
    $(element).trigger('clear');
    if (parent) {
      $('#' + element).parent().remove();
    }
    return $('#' + element).remove();
  };

  getCurrentElement = function() {
    return $('#' + $('#panel_left')[0].dataset['current_element']);
  };

  stoppropagation = function(ev) {
    ev.preventDefault();
    return ev.stopPropagation();
  };

  window.stopPropagation = stoppropagation;

  window.getCurrentElement = getCurrentElement;

  window.delete_ = delete_;

  window.setCss = setCss;

  window.recover_mobility = recover_mobility;

  window.getFromMenu = getFromMenu;

  window.drop = drop;

  SimpleHtml5Editor = (function() {

    function SimpleHtml5Editor(element, movement) {
      var btn, _i, _len, _ref;
      this.element = element;
      this.langs = ['Enter URL', 'Enter Image URL'];
      this.button_creator = [
        {
          'editor_remove_format': [
            {
              'tag': 'removeFormat',
              'format': '',
              'name': '<i title="Remove format in selection" class="icon-remove"></i>'
            }
          ]
        }, {
          'editor_formatting': [
            {
              'tag': 'bold',
              'format': '',
              'name': '<i title="Bold" class="icon-bold"></i>'
            }, {
              'tag': 'underline',
              'format': '',
              'name': '<i title="Underline" class="icon-underline"></i>'
            }, {
              'tag': 'strikeThrough',
              'format': '',
              'name': '<i title="Strike Trough" class="icon-strikethrough"></i>'
            }
          ]
        }, {
          'editor_sub': [
            {
              'tag': 'subscript',
              'format': '',
              'name': 'T<sub title="subscript">x</sub>'
            }, {
              'tag': 'superscript',
              'format': '',
              'name': 'T<sup title="superscript">x</sub>'
            }
          ]
        }, {
          'editor_lists': [
            {
              'tag': 'insertUnorderedList',
              'format': '',
              'name': '<b title="Unordered list" class=icon-list-ul></b>'
            }, {
              'tag': 'insertOrderedList',
              'format': '',
              'name': '<b title="Ordered list" class=icon-list-ol></b>'
            }
          ]
        }, {
          'editor_indentation': [
            {
              'tag': 'indent',
              'format': '',
              'name': '<b class=icon-indent-left title="Indent"></b>'
            }, {
              'tag': 'outdent',
              'format': '',
              'name': '<b class=icon-indent-right title="Outdent"></b>'
            }
          ]
        }, {
          'editor_justify': [
            {
              'tag': 'justifyLeft',
              'format': '',
              'name': '<i title="Align left" class="icon-align-left"></i>'
            }, {
              'tag': 'justifyCenter',
              'format': '',
              'name': '<i class="icon-align-center" title="Center"></i>'
            }, {
              'tag': 'justifyRight',
              'format': '',
              'name': '<i class="icon-align-right" title="Align right"></i>'
            }
          ]
        }, {
          'select': [
            {
              'tag': 'formatBlock',
              'format': 'p',
              'name': 'Paragraph'
            }, {
              'tag': 'formatBlock',
              'format': 'h1',
              'name': 'Header'
            }, {
              'tag': 'formatBlock',
              'format': 'h2',
              'name': 'Header 2'
            }, {
              'tag': 'formatBlock',
              'format': 'h3',
              'name': 'Header 3'
            }
          ]
        }, {
          'select': [
            {
              'tag': 'fontName',
              'format': 'Arial',
              'name': 'Arial'
            }, {
              'tag': 'fontName',
              'format': 'Helvetica',
              'name': 'Helvetica'
            }, {
              'tag': 'fontName',
              'format': 'Times',
              'name': 'Times'
            }, {
              'tag': 'fontName',
              'format': 'Courier',
              'name': 'Courier'
            }
          ]
        }
      ];
      _ref = this.button_creator;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        btn = _ref[_i];
        this.create_button(btn);
      }
      ($('.editor_button')).on('click', this.execcmd);
      ($('.editor_nav')).on('change', this.execcmd);
    }

    SimpleHtml5Editor.prototype.create_group = function(name, element) {
      var elem, html;
      html = "<div class='editor_group " + name + "'>";
      for (elem in element) {
        html += '<a href=# class=editor_button data-format=\"' + element[elem]['format'] + '\" data-tag=\"' + element[elem]['tag'] + '\"  >' + element[elem]['name'] + '</a>';
      }
      html += "</div>";
      return html;
    };

    SimpleHtml5Editor.prototype.create_select = function(element) {
      var elem, html;
      html = "<select class='editor_nav'>";
      for (elem in element) {
        html += '<option data-format=\"' + element[elem]['format'] + '\" data-tag=\"' + element[elem]['tag'] + '\"  >' + element[elem]['name'] + '</option>';
      }
      html += "</select>";
      return html;
    };

    SimpleHtml5Editor.prototype.create_button = function(btn) {
      var element, html, name;
      if (btn['tag']) {
        html = '<a class="editor_button" href="#" data-format=\"' + btn['format'] + '\" data-tag=\"' + btn['tag'] + '\"  >' + btn['name'] + '</a>';
      } else {
        for (name in btn) {
          element = btn[name];
          console.log(name, element);
        }
        if (name !== "select") {
          for (name in btn) {
            element = btn[name];
            html = this.create_group(name, element);
          }
        }
        if (name === "select") {
          for (name in btn) {
            element = btn[name];
            html = this.create_select(element);
          }
        }
      }
      return this.element.prepend(html);
    };

    SimpleHtml5Editor.prototype.execcmd = function(ev) {
      var data, tag, target;
      target = ev.target;
      if (($(target)).is('select')) {
        target = target[target.selectedIndex];
      } else if (!($(target)).is('a')) {
        target = ($(target)).parent()[0];
      } else if (!($(target)).is('a')) {
        target = ($(target)).parent()[0];
      }
      tag = target.dataset['tag'];
      console.log(target);
      data = target.dataset['format'];
      if (tag === 'createlink' || tag === 'insertImage') {
        data = prompt(this.langs[tag]);
      }
      if (data) {
        return document.execCommand(tag, false, data);
      }
      return document.execCommand(tag, false);
    };

    return SimpleHtml5Editor;

  })();

  (function($) {
    return $.fn.simpleHtml5Editor = function() {
      var simpleHtml5Editor;
      return simpleHtml5Editor = new SimpleHtml5Editor(this);
    };
  })($);

  PersistentGrass = (function() {

    function PersistentGrass(element_, options) {
      this.element_ = element_;
      this.options = $.extend({}, options);
      this.element = $(this.element_);
      this.init();
    }

    PersistentGrass.prototype.init = function() {
      this.do_resizable();
      this.assign_events();
      return ($('.textGrassy')).on('DOMNodeInserted DOMSubtreeModified DOMNodeRemoved', this.changed);
    };

    PersistentGrass.prototype.do_resizable = function() {
      var height, width;
      width = this.element.css('width') !== "0px" ? this.element.css('width') : "100px";
      height = this.element.css('height') !== "0px" ? this.element.css('height') : "100px";
      this.element.css('width', "100%");
      this.element.css('height', "100%");
      return this.element = (($(this.element_)).wrap('<div style="width:' + width + '; height:' + height + '" class="resizable" data-offset="' + this.options.offset + '">')).parent();
    };

    PersistentGrass.prototype.assign_events = function() {
      var opt, _i, _len, _ref, _results;
      $('.control_div').on('click', this.clear);
      _ref = ['toolbar_updated', 'clear', 'mouseover', 'drag', 'mouseout', 'dblclick', 'contextmenu', 'dragstart', 'dragend', 'click', 'changed'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        opt = _ref[_i];
        _results.push(this.element.on(opt, this[opt]));
      }
      return _results;
    };

    PersistentGrass.prototype.click = function(ev) {
      var div, id, img, source, target, target_child, text;
      stopPropagation(ev);
      target = $(ev.target);
      target_child = ($(ev.target)).children()[0];
      id = ($(target)).attr('id');
      target.trigger('toolbar_updated', ev);
      if (!id && ($(target_child)).attr('id')) {
        id = ($(target_child)).attr('id');
      }
      if (!id) {
        return;
      }
      ($('.simpleHtml5Editor')).hide();
      recover_mobility();
      $('#panel_left')[0].dataset['current_element'] = id;
      if (getCurrentElement().css('opacity')) {
        $('#opacitypicker').val(getCurrentElement().css('opacity'));
      } else {
        $('#opacitypicker').val(1);
      }
      img = ($(target)).children('img');
      div = ($(target)).children('div');
      if (img[0]) {
        source = ((($(target)).children('img')).attr('src')).split('/');
        text = source[source.length - 1];
      } else if (div[0]) {
        text = "Text element";
      } else if (($(target)).is('img')) {
        source = (($(target)).attr('src')).split('/');
        text = source[source.length - 1];
      } else if (($(target)).is('div')) {
        text = "Text element";
      }
      ($('.show_on_element')).show();
      ($('.hide_on_element')).hide();
      return ($('#current_element_name')).html(text);
    };

    PersistentGrass.prototype.dblclick = function(ev) {
      var target;
      stopPropagation(ev);
      target = $(ev.target);
      if (!target.hasClass('textGrassy')) {
        return;
      }
      target.attr('contentEditable', 'true');
      target.attr('draggable', 'false');
      target.addClass('editor_active');
      ($('#editor')).show();
      return ($('#toggle_editing')).hide();
    };

    PersistentGrass.prototype.clear = function(ev) {
      ($('.simpleHtml5Editor')).hide();
      recover_mobility();
      ($('#toggle_editing')).show();
      ($('.show_on_element')).hide();
      ($('.hide_on_element')).show();
      ($('#current_element_name')).html("");
      return ($('#panel_left'))[0].dataset['current_element'] = false;
    };

    PersistentGrass.prototype.mouseover = function(ev) {
      stopPropagation(ev);
      return ($(this)).toggleClass('selectedObject');
    };

    PersistentGrass.prototype.contextmenu = function(ev) {
      return contextual_menu($(ev.target), [ev.x, ev.y]);
    };

    PersistentGrass.prototype.mouseout = function(ev) {
      var elem;
      stopPropagation(ev);
      ($(this)).toggleClass('selectedObject');
      if (($(this)).attr('id')) {
        elem = $(this);
      } else {
        if (!($(($(this)).children()[0])).attr('id')) {
          return;
        }
        elem = $(($(this)).children()[0]);
      }
      if (elem.css('height' !== elem.data('height'))) {
        elem.trigger('changed', ['height', this.style.height]);
        elem.data('height', elem.css('height'));
      }
      if (elem.css('width' !== elem[0].dataset['width'])) {
        elem.trigger('changed', ['width', this.style.width]);
        return elem.data('width', elem.css('width'));
      }
    };

    PersistentGrass.prototype.toolbar_updated = function(ev) {
      var target;
      target = $(ev.target);
      if (($(ev.target)).hasClass('persistentGrassy')) {
        target = ($(ev.target)).parent();
      }
      return update_toolbar(target);
    };

    PersistentGrass.prototype.dragstart = function(ev) {
      ev.dataTransfer.setData('Text', this.id);
      $(this).trigger('click');
      this.dataset['opacity'] = this.style.opacity ? this.style.opacity : 1;
      return this.style.opacity = 0.4;
    };

    PersistentGrass.prototype.drag = function(ev) {
      $(ev.target).trigger('toolbar_updated');
      this.style.opacity = this.dataset['opacity'] > 0 ? this.dataset['opacity'] : 1;
      if (ev.x > this.dataset['offset']) {
        this.style.left = ev.x - this.dataset['offset'] + "px";
      }
      this.style.top = ev.y + "px";
      this.style.position = "absolute";
      return stopPropagation(ev);
    };

    PersistentGrass.prototype.dragend = function(ev) {
      this.style.opacity = this.dataset['opacity'] > 0 ? this.dataset['opacity'] : 1;
      $(this).trigger('changed', ['top', ev.y]);
      return $(this).trigger('changed', ['left', ev.x]);
    };

    PersistentGrass.prototype.changed = function(ev, attr, result) {
      var id, target;
      if (!ev.target.css) {
        target = ($(ev.target)).parent();
      } else {
        target = $(ev.target);
      }
      target.trigger('toolbar_updated');
      id = target.attr('id');
      return $.ajax('/object/', {
        type: 'PUT',
        dataType: 'json',
        data: JSON.stringify({
          'id': id,
          'attr': attr,
          'result': result
        })
      });
    };

    return PersistentGrass;

  })();

  (function($) {
    return $.fn.PersistentGrass = function(options) {
      var elem, grasspersistence;
      if (options == null) {
        options = {
          offset: 250
        };
      }
      return grasspersistence = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          elem = this[_i];
          _results.push(new PersistentGrass(elem, options));
        }
        return _results;
      }).call(this);
    };
  })($);

  Ruler = (function() {

    function Ruler(element, movement) {
      this.element = element;
      ($(this.element)).attr("draggable", "true");
      this.element[0].dataset['movement'] = movement;
      ($(this.element)).on('dragstart', this.dragstart);
      ($(this.element)).on('drag', this.drag);
      ($(this.element)).on('dragend', this.dragend);
    }

    Ruler.prototype.dragstart = function(ev) {
      var el;
      if (this.dataset['clone'] !== "true") {
        this.dataset['clone'] = "true";
        el = ($(this)).clone().appendTo('body');
        el[0].dataset['clone'] = "false";
        ($(el)).css('z-index', 0);
        ($(this)).css('z-index', 1);
        return ($(el)).Ruler(this.dataset['movement']);
      }
    };

    Ruler.prototype.drag = function(ev) {
      if (this.dataset['movement'] === "x") {
        if (ev.x > 250) {
          return this.style.left = ev.x + "px";
        }
      } else {
        return this.style.top = ev.y + "px";
      }
    };

    Ruler.prototype.dragend = function(ev) {
      return this.style.opacity = 1;
    };

    return Ruler;

  })();

  (function($) {
    return $.fn.Ruler = function(movement) {
      var ruler;
      if (movement == null) {
        movement = "y";
      }
      return ruler = new Ruler(this, movement);
    };
  })($);

  Sortable = (function() {

    function Sortable(element_, options) {
      this.element_ = element_;
      this.options = $.extend({}, options);
      this.element = $(this.element_);
      this.init();
    }

    Sortable.prototype.init = function() {
      return this.assign_events();
    };

    Sortable.prototype.assign_events = function() {
      var opt, _i, _len, _ref, _results;
      _ref = ['dragstart', 'dragend', 'dragover', 'drop', 'dragenter', 'dragleave'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        opt = _ref[_i];
        _results.push(this.element.on(opt, this[opt]));
      }
      return _results;
    };

    Sortable.prototype.dragover = function(ev) {
      ev.preventDefault();
      ev.dataTransfer.dropEffect = "move";
    };

    Sortable.prototype.dblclick = function(ev) {};

    Sortable.prototype.drop = function(ev) {
      console.log(window.dragSrc);
      this.classList.remove('page_editor_over');
      ($(window.dragSrc)).css('opacity', 1);
      window.dragSrc.innerHTML = this.innerHTML;
      this.innerHTML = ev.dataTransfer.getData('text/html');
    };

    Sortable.prototype.dragstart = function(ev) {
      ($(this)).css('opacity', 0.2);
      ev.dataTransfer.effectAllowed = 'move';
      ev.dataTransfer.setData('text/html', this.innerHTML);
      window.dragSrc = this;
    };

    Sortable.prototype.dragenter = function(ev) {
      return this.classList.add('page_editor_over');
    };

    Sortable.prototype.dragleave = function(ev) {
      return this.classList.remove('page_editor_over');
    };

    Sortable.prototype.dragend = function(ev) {};

    return Sortable;

  })();

  (function($) {
    return $.fn.Sortable = function(options) {
      var elem, sortables;
      if (options == null) {
        options = "";
      }
      return sortables = (function() {
        var _i, _len, _ref, _results;
        _ref = this.children();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          _results.push(new Sortable(elem, options));
        }
        return _results;
      }).call(this);
    };
  })($);

  ($(document)).ready(function() {
    setup_menu(document);
    setup_toolbar('body');
    assign_toolbar_events();
    $('#page_editor').children(":not(.no-drag)").Sortable();
    ($('#editor')).simpleHtml5Editor();
    ($('.persistentGrassy')).PersistentGrass();
    ($('.rect-x')).Ruler('x');
    return ($('.rect-y')).Ruler('y');
  });

}).call(this);
