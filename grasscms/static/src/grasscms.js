// Generated by CoffeeScript 1.3.3
(function() {
  var PersistentGrass, Ruler, delete_, getCurrentElement, getFromMenu, setCss;

  setCss = function(param, value, element, parent) {
    var curr_value;
    element = $('#' + element);
    curr_value = Number(($(element)).css(param));
    if (curr_value === "auto" || !curr_value) {
      curr_value = 0;
    }
    if (value === "-1") {
      value = curr_value + 1;
    }
    if (value === "+1") {
      value = curr_value + 1;
    }
    ($(element)).css(param, value);
    if (parent) {
      $(element).parent().css(param, value);
    }
    return $(element).trigger('changed', param, value);
  };

  getFromMenu = function(element) {
    return $(element).parent().parent()[0].dataset['currentTarget'];
  };

  delete_ = function(element, parent) {
    if (parent == null) {
      parent = False;
    }
    $(element).trigger('changed', 'delete');
    $(element).trigger('clear');
    if (parent) {
      $('#' + element).parent().remove();
    }
    return $('#' + element).remove();
  };

  getCurrentElement = function() {
    return $('#' + $('#panel_left')[0].dataset['current_element']);
  };

  window.getCurrentElement = getCurrentElement;

  window.delete_ = delete_;

  window.setCss = setCss;

  window.getFromMenu = getFromMenu;

  PersistentGrass = (function() {
    /*
       @classDescription Persistence plugin for grasscms.
    */

    function PersistentGrass(element_, options) {
      this.element_ = element_;
      this.options = $.extend({}, options);
      this.element = $(this.element_);
      this.init();
    }

    PersistentGrass.prototype.init = function() {
      this.do_resizable();
      return this.assign_events();
    };

    PersistentGrass.prototype.assign_events = function() {
      this.element.on('clear', this.clear_all);
      this.element.on('mouseover', this.mouseover);
      this.element.on('mouseout', this.mouseout);
      this.element.on('dragstart', this.dragstart);
      this.element.on('drag', this.drag);
      this.element.on('dragend', this.dragend);
      this.element.on('click', this.element_clicked);
      this.element.on('changed', this.changed);
      return this.element.on('contextmenu', this.contextmenu);
    };

    PersistentGrass.prototype.element_clicked = function(ev) {
      var first_children_id, source, text;
      first_children_id = ($(ev.target)).attr('id');
      if (!first_children_id && ($(($(ev.target)).children()[0])).attr('id')) {
        first_children_id = ($(($(ev.target)).children[0])).attr('id');
      }
      if (!first_children_id) {
        return;
      }
      $('#panel_left')[0].dataset['current_element'] = first_children_id;
      if (getCurrentElement().css('opacity')) {
        $('#opacitypicker').val(getCurrentElement().css('opacity'));
      } else {
        $('#opacitypicker').val(1);
      }
      if ($(this).children('img').attr('src')) {
        source = $(this).children('img').attr('src').split('/');
        text = source[source.length - 1];
      } else if ($(this).children('div')) {
        text = "Text element";
      }
      $('#current_element_name').html(text);
      if (ev.shiftKey) {
        return $($(this).children[0]).attr('contentEditable', 'true');
      }
    };

    PersistentGrass.prototype.clear_all = function() {
      ($('#panel_left')).dataset['current_element'] = false;
      return ($('#current_element_name')).html("GrassCMS");
    };

    PersistentGrass.prototype.mouseover = function() {
      return ($(this)).toggleClass('selectedObject');
    };

    PersistentGrass.prototype.contextmenu = function(ev) {
      ($('#menu'))[0].dataset['currentTarget'] = $(ev.target).attr('id');
      ($('#menu')).css('top', ev.y - 35);
      ($('#menu')).css('left', ev.x - 300);
      ($('#menu')).show();
      return false;
    };

    PersistentGrass.prototype.mouseout = function() {
      var elem;
      ($(this)).toggleClass('selectedObject');
      if (($(this)).attr('id')) {
        elem = $(this);
      } else {
        if (!($(($(this)).children[0])).attr('id')) {
          return;
        }
        elem = $(($(this)).children[0]);
      }
      if (elem.css('height') !== elem[0].dataset('height')) {
        elem.trigger('changed', 'height', this.style.height);
        elem.dataset['height'] = elem.css('height');
      }
      if (elem.css('width') !== elem[0].dataset['width']) {
        elem.trigger('changed', 'width', this.style.width);
        return elem.dataset['width'] = elem.css('width');
      }
    };

    PersistentGrass.prototype.do_resizable = function() {
      this.element = this.element.wrap('<div class="resizable">').parent();
      this.element[0].dataset["width"] = this.element.css('width');
      return this.element[0].dataset["height"] = this.element.css('height');
    };

    PersistentGrass.prototype.dragstart = function(ev) {
      $(this).trigger('click');
      this.dataset['opacity'] = this.style.opacity;
      return this.style.opacity = 0.4;
    };

    PersistentGrass.prototype.drag = function(ev) {
      $(this).attr('draggable', 'true');
      this.style.opacity = $(this).data['opacity'] > 0 ? $(this).dataset['opacity'] : 1;
      if (ev.x > 250) {
        this.style.left = ev.x - 250 + "px";
      }
      this.style.top = ev.y + "px";
      return this.style.position = "absolute";
    };

    PersistentGrass.prototype.dragend = function(ev) {
      this.style.opacity = this.dataset['opacity'] > 0 ? this.dataset['opacity'] : 1;
      $(this).trigger('changed', 'top', ev.y);
      return $(this).trigger('changed', 'left', ev.x);
    };

    PersistentGrass.prototype.changed = function(attr, result) {
      var id;
      return;
      id = $(this).attr('id');
      return $.ajax('/object/', {
        type: 'PUT',
        dataType: 'json',
        data: JSON.stringify({
          'id': id,
          'attr': attr,
          'result': result
        })
      });
    };

    return PersistentGrass;

  })();

  (function($) {
    return $.fn.PersistentGrass = function(options) {
      var grasspersistence;
      if (options == null) {
        options = {
          offset: 250
        };
      }
      return grasspersistence = new PersistentGrass(this, options);
    };
  })($);

  Ruler = (function() {

    function Ruler(element, movement) {
      this.element = element;
      ($(this.element)).attr("draggable", "true");
      this.element[0].dataset['movement'] = movement;
      ($(this.element)).on('dragstart', this.dragstart);
      ($(this.element)).on('drag', this.drag);
      ($(this.element)).on('dragend', this.dragend);
    }

    Ruler.prototype.dragstart = function(ev) {
      var el;
      if (this.dataset['clone'] !== "true") {
        this.dataset['clone'] = "true";
        el = ($(this)).clone().appendTo('body');
        el[0].dataset['clone'] = "false";
        ($(el)).css('z-index', 0);
        ($(this)).css('z-index', 1);
        return ($(el)).Ruler(this.dataset['movement']);
      }
    };

    Ruler.prototype.drag = function(ev) {
      if (this.dataset['movement'] === "x") {
        if (ev.x > 250) {
          return this.style.left = ev.x + "px";
        }
      } else {
        return this.style.top = ev.y + "px";
      }
    };

    Ruler.prototype.dragend = function(ev) {
      return this.style.opacity = 1;
    };

    return Ruler;

  })();

  (function($) {
    return $.fn.Ruler = function(movement) {
      var ruler;
      if (movement == null) {
        movement = "y";
      }
      return ruler = new Ruler(this, movement);
    };
  })($);

  ($(document)).ready(function() {
    ($(document)).on('click', function(ev) {
      if (ev.button === 0 && ev.target.parentNode.id !== "#menu") {
        return $('#menu').css("display", "none");
      }
    });
    ($('#opacitypicker')).on('change', function() {
      if (getCurrentElement()) {
        return getCurrentElement().css('opacity', $('#opacitypicker').val());
      }
    });
    ($('#colorpicker')).on('change', function() {
      if ($('#panel_left').data('current_element')) {
        return getCurrentElement().css('background', $('#colorpicker').val());
      } else {
        return $('body').css('background', $('#colorpicker').val());
      }
    });
    ($('.persistentGrassy')).PersistentGrass();
    ($('.rect-x')).Ruler('x');
    return ($('.rect-y')).Ruler('y');
  });

}).call(this);
